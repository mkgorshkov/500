package comp303.fivehundred.gui;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;

import comp303.fivehundred.ai.AdvancedRobot;
import comp303.fivehundred.ai.BasicRobot;
import comp303.fivehundred.ai.HumanPlayer;
import comp303.fivehundred.ai.Player;
import comp303.fivehundred.ai.RandomRobot;
import comp303.fivehundred.engine.GameEngine;
import comp303.fivehundred.model.Bid;

/**
 * GUI handler for ActionListener. Takes the events that are specified by getActionCommand() and performs the action
 * which is intended.
 * 
 */
public class GUIListener implements ActionListener
{
	// The GameEngine Object
	private GameEngine aGameEngine = null;
	
	//The GUI attached to this listener.
	private FHGUI aGUI;

	// Game Settings
	// Sets the default location for the logger output.
	private String aLoggerLocation = "miscFiles/transcript.log";
	// Sets the default location for the statistics output.
	private String aStatsLocation = "miscFiles/stats.txt";

	private boolean aAutoMode = false;
	private int aTableView = 0;
	
	// Sets the writer for when the old log file gets copied
	private FileWriter aFstream;

	// Player Settings
	private ArrayList<String> aPlayerNames = new ArrayList<String>();
	private ArrayList<String> aPlayerTypes = new ArrayList<String>();

	// Keeps track of the current state of play
	private String aRunStatus = "";

	// Constructor
	/**
	 * Constructor for the GUIListener.
	 */
	public GUIListener(FHGUI pGUI)
	{
		super();
		aGUI = pGUI;
	}

	// Based on the signature in getActionCommand() branches to action which needs to be performed
	/**
	 * Performs event-handling for all clickable objects. Selects an action to perform based on pEvent.
	 * @param pEvent
	 * 		The event that triggers this method being called.
	 */
	public void actionPerformed(ActionEvent pEvent)
	{
		// Flips the table view forward 1. Doing this wraps around the table card-list.
		if (pEvent.getActionCommand().equals("Change Table View"))
		{
			jumpToView(++aTableView);
			System.out.println("Change Table View");
		}

		// Runs the game in automatic mode, slow enough to comprehend.
		else if (pEvent.getActionCommand().equals("Toggle Automatic Mode"))
		{
			toggleAutoMode();
			System.out.println("Toggle Automatic Mode: " + getAutoMode());
		}

		// Exits the program.
		else if (pEvent.getActionCommand().equals("Exit"))
		{
			System.exit(0);
		}

		// Returns the player to TableSetup.
		else if (pEvent.getActionCommand().equals("Return To Setup"))
		{
			jumpToView(0);
			System.out.println("Return To Setup");
		}

		// Returns the player to TableSetup and resets all the fields.
		else if (pEvent.getActionCommand().equals("Return To Blank Setup"))
		{
			jumpToBlankSetup();
			System.out.println("Return To Blank Setup");
		}
		
		// Returns the player to TableSetup and resets all the fields.
		else if (pEvent.getActionCommand().equals("Reset Stats"))
		{
			// Clears the stats file
			clearFile(aStatsLocation);
			
			// Refreshses the text box in TableStats
			aGUI.card1.refreshTextBox(this);
			
			// TODO: should also reset the gameEngine and GameStatistics
			
			// Prints that we just reset the stats.
			System.out.println("Reset Stats");
		}

		// Reads the player names and types from TableSettings. Stores them, creates a GameObject, and jumps to
		// TablePlay.
		else if (pEvent.getActionCommand().equals("Setup New Game"))
		{
			// Sets player names and types from TableSetup specifications.
			aPlayerNames = aGUI.card1.getPlayerNames();
			aPlayerTypes = aGUI.card1.getPlayerTypes();
			if(aPlayerTypes.get(0).compareToIgnoreCase("human") == 0)
			{
				aAutoMode = false;
			}

			// Sets up the new game and jumps to TablePlay.
			setupNewGame();
			jumpToView(1);
			aGUI.card1.setGameHasBegun(true);
			
			// Begins running the game.
			runGame();
			
			// Does some printing.
			System.out.println("Player 1: name=" + aPlayerNames.get(0) + "\t type=" + aPlayerTypes.get(0));
			System.out.println("Player 2: name=" + aPlayerNames.get(1) + "\t type=" + aPlayerTypes.get(1));
			System.out.println("Player 3: name=" + aPlayerNames.get(2) + "\t type=" + aPlayerTypes.get(2));
			System.out.println("Player 4: name=" + aPlayerNames.get(3) + "\t type=" + aPlayerTypes.get(3));
		}

		// Changes the players without restarting the game. TODO: This breaks when clicked before setting up a game.
		else if (pEvent.getActionCommand().equals("Edit Players"))
		{	
			// First checks if the game has begun (if it hasn't, performing this action will result in an exception)
			if (!aGUI.card1.getGameHasBegun())
			{
				JOptionPane.showMessageDialog(null, "Cannot edit players until you have created a game.", "Error", 1);
				System.out.println("Edit Players (Failure)");
			}
			// Checks if we are switching to or from a human. If so, ignores the change.
			else if ("Human".equals(aPlayerTypes.get(0)) ||
					"Human".equals(aGUI.card1.getPlayerTypes().get(0)))
			{
				JOptionPane.showMessageDialog(null, "You cannot change to or from a human player.", "Error", 1);
				System.out.println("Edit Players (Failure)");
			}
			// If neither of the two errors above occurred, performs the event.
			else if (!"Human".equals(aPlayerTypes.get(0)) &&
					!"Human".equals(aGUI.card1.getPlayerTypes().get(0)))
			{
				aPlayerTypes = aGUI.card1.getPlayerTypes();
				editPlayers();
				System.out.println("Edit Players (Success)");
			}
		}
		
		// Change the logger location.
		else if (pEvent.getActionCommand().equals("Change Log Location"))
		{
			changeLogLocation();
			System.out.println("Change Log Location");
		}
		
		else if (pEvent.getActionCommand().equals("Human Bid"))
		{
			// Gets the humans bid. TODO: currently this is handled by a random robot, should be handled by actual selection.
			Bid aBid = aGUI.card2.getHumanBid(this);
			humanBid(aBid);
		}
		
		else 
		{
			System.out.println("Command \"" + pEvent.getActionCommand() + "\" is not recognized!");
		}
	}

	/**
	 * Handles human bidding when applicable (can only be called by the Human Bid button in TablePlay, which *should*
	 * only be clickable when Human Bid is applicable) TODO: Currently I can't figure out how to deactivate it.
	 * @param pBid
	 * 		The Human's Bid.
	 */
	private void humanBid(Bid pBid)
	{
		if (isValidBid(pBid))
		{
			aGameEngine.bid(pBid);
			System.out.println("it was! here is the list of all player bids: " +
					aGameEngine.getBids()[0].toString() + aGameEngine.getBids()[1].toString() +
					aGameEngine.getBids()[2].toString() + aGameEngine.getBids()[3].toString());
			aGUI.card2.setBidButtonVisibility(false);
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Illegal bid. Try again!", "Error", 1);
		}
		if (aGameEngine.allPasses())
		{
			aGameEngine.newRound(false);
			robotBids();
		}
		else
		{
			if(aGameEngine.getContractHolderIndex() == 0)
			{
				aRunStatus = "exchange";
				aGUI.card2.setExchangeButtonVisibility(true);
			}
		}
	}

	/**
	 * Handles robot bidding and deals out new hands to players as necessary.
	 */
	private void robotBids()
	{
		// Handles dealing and updates TablePlay.
		aGameEngine.deal();
		aGUI.card2.drawDeal();

		// Begins the bidding stage.
		aGameEngine.bid();
		aRunStatus = "bidding";
		if(!aAutoMode)
		{
			aGUI.card2.setBidButtonVisibility(true);
		}
	}
	/**
	 * Checks if the human is making a valid bid or not.
	 * @param pBid
	 * @return
	 * 		True if the bid is valid, false if not.
	 */
	private boolean isValidBid(Bid pBid)
	{
		System.out.println("checking if the bid: " + pBid.toString() + " is valid");
		if (pBid.isPass() || aGameEngine.getBids().length == 0 || Bid.max(aGameEngine.getBids()).isPass())
		{
			return true;
		}
		else
		{
			return pBid.toIndex() > Bid.max(aGameEngine.getBids()).toIndex();
		}
	}

	/** 
	 * Begins running the game.
	 */
	private void runGame()
	{
		// Starts the new round.
		aGameEngine.newRound(true);
		robotBids();
	}

	private void editPlayers()
	{
		// Initializes players.
		Player playerA = null;
		Player playerB = null;
		Player playerC = null;
		Player playerD = null;
		
		// Defines player 1.
		if ("Random AI".equals(aPlayerTypes.get(0)))
		{
			playerA = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(0)))
		{
			playerA = new BasicRobot();
		}
		else
		{
			playerA = new AdvancedRobot();
		}

		// Defines player 2.
		if ("Random AI".equals(aPlayerTypes.get(1)))
		{
			playerB = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(1)))
		{
			playerB = new BasicRobot();
		}
		else
		{
			playerB = new AdvancedRobot();
		}

		// Defines player 3.
		if ("Random AI".equals(aPlayerTypes.get(2)))
		{
			playerC = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(2)))
		{
			playerC = new BasicRobot();
		}
		else
		{
			playerC = new AdvancedRobot();
		}

		// Defines player 4.
		if ("Random AI".equals(aPlayerTypes.get(3)))
		{
			playerD = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(3)))
		{
			playerD = new BasicRobot();
		}
		else
		{
			playerD = new AdvancedRobot();
		}
		
		// Changes the playres.
		getGameEngine().changePlayer(playerA, 0);
		getGameEngine().changePlayer(playerB, 1);
		getGameEngine().changePlayer(playerC, 2);
		getGameEngine().changePlayer(playerD, 3);
		
		// Test if player 0 is changed properly
		System.out.println("Changed player 2 to: " + getGameEngine().getPlayers().get(1).getClass());
	}

	/**
	 * Changes the location of the logfile to textbox input.
	 */
	private void changeLogLocation()
	{
		// Shows what the old location of the logger was.
		System.out.println("Old Logger Location: " + aLoggerLocation);

		// Takes the input from the user via dialog box
		String tempLogFileLocation = JOptionPane.showInputDialog(null, "Please enter a new log file location: ",
				"Log File Location", 1);

		// Checks to see whether the input is valid and performs necessary action.
		if (tempLogFileLocation != null)
		{

			// Checks that it ends with a .log
			if (!tempLogFileLocation.endsWith(".log"))
			{
				JOptionPane.showMessageDialog(null, "The extension should be \".log\". Try again!", "Error", 1);
				tempLogFileLocation = aLoggerLocation;
			}
			
			try
			{
				// Read from the old logger file
				Scanner logIn = new Scanner(aLoggerLocation);
				
				// Append to the beginning of the logger file.
				aFstream = new FileWriter(tempLogFileLocation, true);
				BufferedWriter logOut = new BufferedWriter(aFstream);
				
				// Writes everything from the old to the new logger file.
				while(logIn.hasNext())
				{
					logOut.write(logIn.next());
				}

				logOut.close();
			}
			catch (IOException pException)
			{
				JOptionPane.showMessageDialog(null, "Improper syntax for logger file location.", "Error", 1);
				tempLogFileLocation = aLoggerLocation;
			}
			
			JOptionPane.showMessageDialog(null, "The new location is now: " + tempLogFileLocation, "Log File Location", 1);
		}
		else
		{
			JOptionPane.showMessageDialog(null, "No changes made. Default location and name.",
					"Log File Location", 1);
		}

		// Deletes the old logfile.
		File toDelete = new File(aLoggerLocation);
		toDelete.delete();

		// Sets the logfile location to the inputed text.
		aLoggerLocation = tempLogFileLocation;
		
		// Prints the new location.
		System.out.println("New Logger Location: " + aLoggerLocation);
	}

	/**
	 * Toggles Automatic Mode on or off. TODO: This does nothing until we make the gameloop check it.
	 */
	private void toggleAutoMode()
	{
		setAutoMode(!getAutoMode());
	}

	/**
	 * Creates a new GameEngine object based on the player specifications in TableSettings.
	 */
	private void setupNewGame()
	{
		// Initializes players.
		Player playerA = null;
		Player playerB = null;
		Player playerC = null;
		Player playerD = null;
		boolean interactive = false;
		
		// Defines player 1.
		if ("Human".equals(aPlayerTypes.get(0)))
		{
			playerA = new HumanPlayer();
			interactive = true;
		}
		else if ("Random AI".equals(aPlayerTypes.get(0)))
		{
			playerA = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(0)))
		{
			playerA = new BasicRobot();
		}
		else
		{
			playerA = new AdvancedRobot();
		}

		// Defines player 2.
		if ("Random AI".equals(aPlayerTypes.get(1)))
		{
			playerB = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(1)))
		{
			playerB = new BasicRobot();
		}
		else
		{
			playerB = new AdvancedRobot();
		}

		// Defines player 3.
		if ("Random AI".equals(aPlayerTypes.get(2)))
		{
			playerC = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(2)))
		{
			playerC = new BasicRobot();
		}
		else
		{
			playerC = new AdvancedRobot();
		}

		// Defines player 4.
		if ("Random AI".equals(aPlayerTypes.get(3)))
		{
			playerD = new RandomRobot();
		}
		else if ("Basic AI".equals(aPlayerTypes.get(3)))
		{
			playerD = new BasicRobot();
		}
		else
		{
			playerD = new AdvancedRobot();
		}

		// Creates the game.
		setGameEngine(new GameEngine(interactive, playerA, playerB, playerC, playerD));
	}

	/**
	 * Resets the fields in TableSettings, clears the statistics file, and jumps to the new blank TableSettings card.
	 */
	private void jumpToBlankSetup()
	{
		clearFile(aStatsLocation);
		clearSetupOptions();
		aGUI.card1.setGameHasBegun(false);
		jumpToView(0);
	}

	/**
	 * Resets the fields in TableSettings by creating a new TableSettings object.
	 */
	private void clearSetupOptions()
	{
		aGUI.table.remove(0);
		aGUI.table.add(new TableSetup(this), "greencard", 0);
	}

	/**
	 * Clears the file at the specified location.
	 * 
	 * @param pFileToClear
	 *            the string representation of the file you want to clear.
	 */
	private void clearFile(String pFileToClear)
	{
		try
		{
			File statsFile = new File(pFileToClear);
			statsFile.delete();
			statsFile.createNewFile();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	/**
	 * Jumps the Table View to the specified index.
	 * 
	 * @param pIndex
	 *            sets the table view to the card with the index specified.
	 */
	private void jumpToView(int pIndex)
	{
		assert pIndex == 1 || pIndex == 2;
		CardLayout cl = (CardLayout) (aGUI.table.getLayout());
		cl.first(aGUI.table);
		aTableView = 0;
		while (aTableView != pIndex)
		{
			cl.next(aGUI.table);
			aTableView += 1;
		}
	}

	/**
	 * Returns the names of the players.
	 * 
	 * @return the player names.
	 */
	public ArrayList<String> getPlayerNames()
	{
		return aPlayerNames;
	}

	/**
	 * Returns the types of the players.
	 * 
	 * @return the player types.
	 */
	public ArrayList<String> getPlayerTypes()
	{
		return aPlayerTypes;
	}

	/**
	 * Returns the location of the Log file.
	 * 
	 * @return the log file location.
	 */
	public String getLoggerLocation()
	{
		return aLoggerLocation;
	}

	/**
	 * Returns the location of the Stats file.
	 * 
	 * @return the stat file location.
	 */
	public String getStatsLocation()
	{
		return aStatsLocation;
	}

	/**
	 * Getter method for aGameEngine.
	 * 
	 * @return aGameEngine
	 */
	public GameEngine getGameEngine()
	{
		return aGameEngine;
	}

	/**
	 * Setter method for aAutoMode.
	 * 
	 * @return aAutoMode
	 */
	public boolean getAutoMode()
	{
		return aAutoMode;
	}

	/**
	 * Getter method for aTableView.
	 * 
	 * @return the value of aTableView.
	 */
	public int getTableView()
	{
		return aTableView;
	}
	
	/**
	 * Gets the GUI.
	 */
	public FHGUI getGUI()
	{
		return aGUI;
	}

	/**
	 * Setter method for aGameEngine.
	 * 
	 * @param pGameEngine
	 *            the new value for aGameEngine.
	 */
	public void setGameEngine(GameEngine pGameEngine)
	{
		this.aGameEngine = pGameEngine;
	}

	/**
	 * Setter method for aAutoMode.
	 * 
	 * @param pAutoMode
	 *            the new value for aAutoMode.
	 */
	public void setAutoMode(boolean pAutoMode)
	{
		this.aAutoMode = pAutoMode;
	}

	/**
	 * Setter method for aTableView.
	 * 
	 * @param pTableView
	 *            the new value for aTableView.
	 */
	public void setTableView(int pTableView)
	{
		this.aTableView = pTableView;
	}

}
